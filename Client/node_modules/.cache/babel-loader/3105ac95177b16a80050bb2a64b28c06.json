{"ast":null,"code":"/*! (c) 2020 Andrea Giammarchi */\nconst {\n  parse: $parse,\n  stringify: $stringify\n} = JSON;\nconst {\n  keys\n} = Object;\nconst Primitive = String; // it could be Number\n\nconst primitive = 'string'; // it could be 'number'\n\nconst ignore = {};\nconst object = 'object';\n\nconst noop = (_, value) => value;\n\nconst primitives = value => value instanceof Primitive ? Primitive(value) : value;\n\nconst Primitives = (_, value) => typeof value === primitive ? new Primitive(value) : value;\n\nconst revive = (input, parsed, output, $) => {\n  const lazy = [];\n\n  for (let ke = keys(output), {\n    length\n  } = ke, y = 0; y < length; y++) {\n    const k = ke[y];\n    const value = output[k];\n\n    if (value instanceof Primitive) {\n      const tmp = input[value];\n\n      if (typeof tmp === object && !parsed.has(tmp)) {\n        parsed.add(tmp);\n        output[k] = ignore;\n        lazy.push({\n          k,\n          a: [input, parsed, tmp, $]\n        });\n      } else output[k] = $.call(output, k, tmp);\n    } else if (output[k] !== ignore) output[k] = $.call(output, k, value);\n  }\n\n  for (let {\n    length\n  } = lazy, i = 0; i < length; i++) {\n    const {\n      k,\n      a\n    } = lazy[i];\n    output[k] = $.call(output, k, revive.apply(null, a));\n  }\n\n  return output;\n};\n\nconst set = (known, input, value) => {\n  const index = Primitive(input.push(value) - 1);\n  known.set(value, index);\n  return index;\n};\n\nexport const parse = (text, reviver) => {\n  const input = $parse(text, Primitives).map(primitives);\n  const value = input[0];\n  const $ = reviver || noop;\n  const tmp = typeof value === object && value ? revive(input, new Set(), value, $) : value;\n  return $.call({\n    '': tmp\n  }, '', tmp);\n};\nexport const stringify = (value, replacer, space) => {\n  const $ = replacer && typeof replacer === object ? (k, v) => k === '' || -1 < replacer.indexOf(k) ? v : void 0 : replacer || noop;\n  const known = new Map();\n  const input = [];\n  const output = [];\n  let i = +set(known, input, $.call({\n    '': value\n  }, '', value));\n  let firstRun = !i;\n\n  while (i < input.length) {\n    firstRun = true;\n    output[i] = $stringify(input[i++], replace, space);\n  }\n\n  return '[' + output.join(',') + ']';\n\n  function replace(key, value) {\n    if (firstRun) {\n      firstRun = !firstRun;\n      return value;\n    }\n\n    const after = $.call(this, key, value);\n\n    switch (typeof after) {\n      case object:\n        if (after === null) return after;\n\n      case primitive:\n        return known.get(after) || set(known, input, after);\n    }\n\n    return after;\n  }\n};\nexport const toJSON = any => $parse(stringify(any));\nexport const fromJSON = any => parse($stringify(any));","map":{"version":3,"names":["parse","$parse","stringify","$stringify","JSON","keys","Object","Primitive","String","primitive","ignore","object","noop","_","value","primitives","Primitives","revive","input","parsed","output","$","lazy","ke","length","y","k","tmp","has","add","push","a","call","i","apply","set","known","index","text","reviver","map","Set","replacer","space","v","indexOf","Map","firstRun","replace","join","key","after","get","toJSON","any","fromJSON"],"sources":["C:/Users/akhilrani/Desktop/ContactManagementSystem-NFJF/Client/node_modules/flatted/esm/index.js"],"sourcesContent":["/*! (c) 2020 Andrea Giammarchi */\r\n\r\nconst {parse: $parse, stringify: $stringify} = JSON;\r\nconst {keys} = Object;\r\n\r\nconst Primitive = String;   // it could be Number\r\nconst primitive = 'string'; // it could be 'number'\r\n\r\nconst ignore = {};\r\nconst object = 'object';\r\n\r\nconst noop = (_, value) => value;\r\n\r\nconst primitives = value => (\r\n  value instanceof Primitive ? Primitive(value) : value\r\n);\r\n\r\nconst Primitives = (_, value) => (\r\n  typeof value === primitive ? new Primitive(value) : value\r\n);\r\n\r\nconst revive = (input, parsed, output, $) => {\r\n  const lazy = [];\r\n  for (let ke = keys(output), {length} = ke, y = 0; y < length; y++) {\r\n    const k = ke[y];\r\n    const value = output[k];\r\n    if (value instanceof Primitive) {\r\n      const tmp = input[value];\r\n      if (typeof tmp === object && !parsed.has(tmp)) {\r\n        parsed.add(tmp);\r\n        output[k] = ignore;\r\n        lazy.push({k, a: [input, parsed, tmp, $]});\r\n      }\r\n      else\r\n        output[k] = $.call(output, k, tmp);\r\n    }\r\n    else if (output[k] !== ignore)\r\n      output[k] = $.call(output, k, value);\r\n  }\r\n  for (let {length} = lazy, i = 0; i < length; i++) {\r\n    const {k, a} = lazy[i];\r\n    output[k] = $.call(output, k, revive.apply(null, a));\r\n  }\r\n  return output;\r\n};\r\n\r\nconst set = (known, input, value) => {\r\n  const index = Primitive(input.push(value) - 1);\r\n  known.set(value, index);\r\n  return index;\r\n};\r\n\r\nexport const parse = (text, reviver) => {\r\n  const input = $parse(text, Primitives).map(primitives);\r\n  const value = input[0];\r\n  const $ = reviver || noop;\r\n  const tmp = typeof value === object && value ?\r\n              revive(input, new Set, value, $) :\r\n              value;\r\n  return $.call({'': tmp}, '', tmp);\r\n};\r\n\r\nexport const stringify = (value, replacer, space) => {\r\n  const $ = replacer && typeof replacer === object ?\r\n            (k, v) => (k === '' || -1 < replacer.indexOf(k) ? v : void 0) :\r\n            (replacer || noop);\r\n  const known = new Map;\r\n  const input = [];\r\n  const output = [];\r\n  let i = +set(known, input, $.call({'': value}, '', value));\r\n  let firstRun = !i;\r\n  while (i < input.length) {\r\n    firstRun = true;\r\n    output[i] = $stringify(input[i++], replace, space);\r\n  }\r\n  return '[' + output.join(',') + ']';\r\n  function replace(key, value) {\r\n    if (firstRun) {\r\n      firstRun = !firstRun;\r\n      return value;\r\n    }\r\n    const after = $.call(this, key, value);\r\n    switch (typeof after) {\r\n      case object:\r\n        if (after === null) return after;\r\n      case primitive:\r\n        return known.get(after) || set(known, input, after);\r\n    }\r\n    return after;\r\n  }\r\n};\r\n\r\nexport const toJSON = any => $parse(stringify(any));\r\nexport const fromJSON = any => parse($stringify(any));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}